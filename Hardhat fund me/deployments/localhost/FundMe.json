{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe_NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xaac5a3c43c67fe0028adea968cb5c7e952e123b415d1352e8acd2c7042a26160",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1049106",
    "logsBloom": "0x
    "blockHash": "0x72a0bb6d8601d48f373efe4d401bdc4e086628865166f5ed7036811a9bf7fa92",
    "transactionHash": "0xaac5a3c43c67fe0028adea968cb5c7e952e123b415d1352e8acd2c7042a26160",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1049106",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "c1dfd5889972b10c0ad6b7a78b0dd8b0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe_NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"SAc\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as our library\"}},\"title\":\"A conytract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"THis function funds this contract\"}},\"notice\":\"demo sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConvertor.sol\\\";\\n\\nerror FundMe_NotOwner();\\n\\n/** @title A conytract for crowd funding\\n *   @author SAc\\n *   @notice demo sample funding contract\\n *   @dev This implements price feeds as our library\\n */\\n\\ncontract FundMe {\\n    // Type Declaration\\n    using PriceConvertor for uint256;\\n\\n    //State declaration\\n    mapping(address => uint256) private adressToAmountFunded;\\n    uint256 public minimumUsd = 10 * 1e18;\\n    address[] private funders;\\n    address private immutable owner;\\n    AggregatorV3Interface public priceFeed;\\n\\n    modifier onlyOwner() {\\n        // require(owner == msg.sender, \\\"Sender is not owner\\\");\\n        if (msg.sender != owner) revert FundMe_NotOwner();\\n        _;\\n    }\\n\\n    // functions orders;\\n    // contructor\\n    // receive\\n    // fallback\\n    // external\\n    // public\\n    // internal\\n    // private\\n    // view / pure\\n\\n    constructor(address priceFeedAddress) {\\n        owner = msg.sender;\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n\\n    /**\\n     *   @notice THis function funds this contract\\n     *   @dev This implements price feeds as our library\\n     */\\n\\n    function fund() public payable {\\n        require(\\n            msg.value.getConvertedPrice(priceFeed) >= minimumUsd,\\n            \\\"Required minimum 10Usd\\\"\\n        );\\n        funders.push(msg.sender);\\n        adressToAmountFunded[msg.sender] = msg.value;\\n    }\\n\\n    function withdraw() public {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funderAddress = funders[funderIndex];\\n            adressToAmountFunded[funderAddress] = 0;\\n        }\\n\\n        funders = new address[](0);\\n\\n        // payable(msg.sender).transfer(address(this).balance);\\n\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Tx failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public onlyOwner {\\n        address[] memory cfunders = funders;\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < cfunders.length;\\n            funderIndex++\\n        ) {\\n            address funder = cfunders[funderIndex];\\n            adressToAmountFunded[funder] = 0;\\n        }\\n\\n        funders = new address[](0);\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Tx failed\\\");\\n    }\\n\\n    function getOwner() public view returns(address){\\n        return owner;\\n    }\\n\\n\\n    function getFunder(uint256 index) public view returns(address){\\n        return funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address funder) public view returns(uint256){\\n        return adressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0xabdf58bdc272c7edcccce37deed9c5f73409b68d7f37b2a2e5e92fe0a94b300c\",\"license\":\"MIT\"},\"contracts/PriceConvertor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConvertor{\\n    function getPrice(AggregatorV3Interface _priceFeed) internal view returns (uint256) {\\n        (,int256 amount,,,) = _priceFeed.latestRoundData();\\n        return uint256(amount / 1 * 1e10); \\n    }\\n\\n    function getConvertedPrice(uint256 _ethAmount,AggregatorV3Interface priceFeed) internal view returns (uint256){\\n        uint256 feedPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUSd = (_ethAmount * feedPrice) / 1e18;\\n        return ethAmountInUSd;\\n    }\\n}\",\"keccak256\":\"0x603daef98d367ce04c82138d94178361dfaea61d49e978c7a7accec8b3f51154\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052678ac7230489e800006001553480156200001d57600080fd5b50604051620012b7380380620012b78339818101604052810190620000439190620000d9565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200015e565b600081519050620000d38162000144565b92915050565b600060208284031215620000f257620000f16200013f565b5b60006200010284828501620000c2565b91505092915050565b600062000118826200011f565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200014f816200010b565b81146200015b57600080fd5b50565b60805160601c6111336200018460003960008181610424015261059501526111336000f3fe60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e81461013d5780639e87a5cd14610168578063b60d428814610193578063be2693f01461019d578063d7b4750c146101b457610091565b80630343fb2514610093578063098de820146100d05780633ccfd60b146100fb578063741bef1a1461011257610091565b3661009157005b005b34801561009f57600080fd5b506100ba60048036038101906100b59190610a77565b6101f1565b6040516100c79190610c6d565b60405180910390f35b3480156100dc57600080fd5b506100e5610239565b6040516100f29190610c6d565b60405180910390f35b34801561010757600080fd5b5061011061023f565b005b34801561011e57600080fd5b506101276103fa565b6040516101349190610c12565b60405180910390f35b34801561014957600080fd5b50610152610420565b60405161015f9190610bf7565b60405180910390f35b34801561017457600080fd5b5061017d610448565b60405161018a9190610c12565b60405180910390f35b61019b610472565b005b3480156101a957600080fd5b506101b2610593565b005b3480156101c057600080fd5b506101db60048036038101906101d69190610aa4565b610837565b6040516101e89190610bf7565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60015481565b60005b6002805490508110156102ea5760006002828154811061026557610264610fe9565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806102e290610f42565b915050610242565b50600067ffffffffffffffff81111561030657610305611018565b5b6040519080825280602002602001820160405280156103345781602001602082028036833780820191505090505b506002908051906020019061034a929190610967565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161037190610be2565b60006040518083038185875af1925050503d80600081146103ae576040519150601f19603f3d011682016040523d82523d6000602084013e6103b3565b606091505b50509050806103f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ee90610c2d565b60405180910390fd5b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6001546104aa600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461087f90919063ffffffff16565b10156104eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e290610c4d565b60405180910390fd5b6002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610618576040517f10e0797900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600280548060200260200160405190810160405280929190818152602001828054801561069c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610652575b5050505050905060005b81518110156107265760008282815181106106c4576106c3610fe9565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061071e90610f42565b9150506106a6565b50600067ffffffffffffffff81111561074257610741611018565b5b6040519080825280602002602001820160405280156107705781602001602082028036833780820191505090505b5060029080519060200190610786929190610967565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516107ad90610be2565b60006040518083038185875af1925050503d80600081146107ea576040519150601f19603f3d011682016040523d82523d6000602084013e6107ef565b606091505b5050905080610833576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082a90610c2d565b60405180910390fd5b5050565b60006002828154811061084d5761084c610fe9565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061088b836108bb565b90506000670de0b6b3a764000082866108a49190610e56565b6108ae9190610d0e565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561090457600080fd5b505afa158015610918573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093c9190610ad1565b5050509150506402540be4006001826109559190610ca4565b61095f9190610d3f565b915050919050565b8280548282559060005260206000209081019282156109e0579160200282015b828111156109df5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610987565b5b5090506109ed91906109f1565b5090565b5b80821115610a0a5760008160009055506001016109f2565b5090565b600081359050610a1d816110a1565b92915050565b600081519050610a32816110b8565b92915050565b600081359050610a47816110cf565b92915050565b600081519050610a5c816110cf565b92915050565b600081519050610a71816110e6565b92915050565b600060208284031215610a8d57610a8c611047565b5b6000610a9b84828501610a0e565b91505092915050565b600060208284031215610aba57610ab9611047565b5b6000610ac884828501610a38565b91505092915050565b600080600080600060a08688031215610aed57610aec611047565b5b6000610afb88828901610a62565b9550506020610b0c88828901610a23565b9450506040610b1d88828901610a4d565b9350506060610b2e88828901610a4d565b9250506080610b3f88828901610a62565b9150509295509295909350565b610b5581610eb0565b82525050565b610b6481610f0c565b82525050565b6000610b77600983610c93565b9150610b828261104c565b602082019050919050565b6000610b9a600083610c88565b9150610ba582611075565b600082019050919050565b6000610bbd601683610c93565b9150610bc882611078565b602082019050919050565b610bdc81610eec565b82525050565b6000610bed82610b8d565b9150819050919050565b6000602082019050610c0c6000830184610b4c565b92915050565b6000602082019050610c276000830184610b5b565b92915050565b60006020820190508181036000830152610c4681610b6a565b9050919050565b60006020820190508181036000830152610c6681610bb0565b9050919050565b6000602082019050610c826000830184610bd3565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610caf82610ec2565b9150610cba83610ec2565b925082610cca57610cc9610fba565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615610d0357610d02610f8b565b5b828205905092915050565b6000610d1982610eec565b9150610d2483610eec565b925082610d3457610d33610fba565b5b828204905092915050565b6000610d4a82610ec2565b9150610d5583610ec2565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d9457610d93610f8b565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610dd157610dd0610f8b565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e0e57610e0d610f8b565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e4b57610e4a610f8b565b5b828202905092915050565b6000610e6182610eec565b9150610e6c83610eec565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ea557610ea4610f8b565b5b828202905092915050565b6000610ebb82610ecc565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610f1782610f1e565b9050919050565b6000610f2982610f30565b9050919050565b6000610f3b82610ecc565b9050919050565b6000610f4d82610eec565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610f8057610f7f610f8b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f5478206661696c65640000000000000000000000000000000000000000000000600082015250565b50565b7f5265717569726564206d696e696d756d20313055736400000000000000000000600082015250565b6110aa81610eb0565b81146110b557600080fd5b50565b6110c181610ec2565b81146110cc57600080fd5b50565b6110d881610eec565b81146110e357600080fd5b50565b6110ef81610ef6565b81146110fa57600080fd5b5056fea26469706673582212200fe5c7c90860198946e7c63bad632ba5398f4a1c9cee60a55a48db88653c0ecc64736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e81461013d5780639e87a5cd14610168578063b60d428814610193578063be2693f01461019d578063d7b4750c146101b457610091565b80630343fb2514610093578063098de820146100d05780633ccfd60b146100fb578063741bef1a1461011257610091565b3661009157005b005b34801561009f57600080fd5b506100ba60048036038101906100b59190610a77565b6101f1565b6040516100c79190610c6d565b60405180910390f35b3480156100dc57600080fd5b506100e5610239565b6040516100f29190610c6d565b60405180910390f35b34801561010757600080fd5b5061011061023f565b005b34801561011e57600080fd5b506101276103fa565b6040516101349190610c12565b60405180910390f35b34801561014957600080fd5b50610152610420565b60405161015f9190610bf7565b60405180910390f35b34801561017457600080fd5b5061017d610448565b60405161018a9190610c12565b60405180910390f35b61019b610472565b005b3480156101a957600080fd5b506101b2610593565b005b3480156101c057600080fd5b506101db60048036038101906101d69190610aa4565b610837565b6040516101e89190610bf7565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60015481565b60005b6002805490508110156102ea5760006002828154811061026557610264610fe9565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806102e290610f42565b915050610242565b50600067ffffffffffffffff81111561030657610305611018565b5b6040519080825280602002602001820160405280156103345781602001602082028036833780820191505090505b506002908051906020019061034a929190610967565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161037190610be2565b60006040518083038185875af1925050503d80600081146103ae576040519150601f19603f3d011682016040523d82523d6000602084013e6103b3565b606091505b50509050806103f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ee90610c2d565b60405180910390fd5b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6001546104aa600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461087f90919063ffffffff16565b10156104eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e290610c4d565b60405180910390fd5b6002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610618576040517f10e0797900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600280548060200260200160405190810160405280929190818152602001828054801561069c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610652575b5050505050905060005b81518110156107265760008282815181106106c4576106c3610fe9565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061071e90610f42565b9150506106a6565b50600067ffffffffffffffff81111561074257610741611018565b5b6040519080825280602002602001820160405280156107705781602001602082028036833780820191505090505b5060029080519060200190610786929190610967565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516107ad90610be2565b60006040518083038185875af1925050503d80600081146107ea576040519150601f19603f3d011682016040523d82523d6000602084013e6107ef565b606091505b5050905080610833576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082a90610c2d565b60405180910390fd5b5050565b60006002828154811061084d5761084c610fe9565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061088b836108bb565b90506000670de0b6b3a764000082866108a49190610e56565b6108ae9190610d0e565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561090457600080fd5b505afa158015610918573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093c9190610ad1565b5050509150506402540be4006001826109559190610ca4565b61095f9190610d3f565b915050919050565b8280548282559060005260206000209081019282156109e0579160200282015b828111156109df5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610987565b5b5090506109ed91906109f1565b5090565b5b80821115610a0a5760008160009055506001016109f2565b5090565b600081359050610a1d816110a1565b92915050565b600081519050610a32816110b8565b92915050565b600081359050610a47816110cf565b92915050565b600081519050610a5c816110cf565b92915050565b600081519050610a71816110e6565b92915050565b600060208284031215610a8d57610a8c611047565b5b6000610a9b84828501610a0e565b91505092915050565b600060208284031215610aba57610ab9611047565b5b6000610ac884828501610a38565b91505092915050565b600080600080600060a08688031215610aed57610aec611047565b5b6000610afb88828901610a62565b9550506020610b0c88828901610a23565b9450506040610b1d88828901610a4d565b9350506060610b2e88828901610a4d565b9250506080610b3f88828901610a62565b9150509295509295909350565b610b5581610eb0565b82525050565b610b6481610f0c565b82525050565b6000610b77600983610c93565b9150610b828261104c565b602082019050919050565b6000610b9a600083610c88565b9150610ba582611075565b600082019050919050565b6000610bbd601683610c93565b9150610bc882611078565b602082019050919050565b610bdc81610eec565b82525050565b6000610bed82610b8d565b9150819050919050565b6000602082019050610c0c6000830184610b4c565b92915050565b6000602082019050610c276000830184610b5b565b92915050565b60006020820190508181036000830152610c4681610b6a565b9050919050565b60006020820190508181036000830152610c6681610bb0565b9050919050565b6000602082019050610c826000830184610bd3565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610caf82610ec2565b9150610cba83610ec2565b925082610cca57610cc9610fba565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615610d0357610d02610f8b565b5b828205905092915050565b6000610d1982610eec565b9150610d2483610eec565b925082610d3457610d33610fba565b5b828204905092915050565b6000610d4a82610ec2565b9150610d5583610ec2565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d9457610d93610f8b565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610dd157610dd0610f8b565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e0e57610e0d610f8b565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e4b57610e4a610f8b565b5b828202905092915050565b6000610e6182610eec565b9150610e6c83610eec565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ea557610ea4610f8b565b5b828202905092915050565b6000610ebb82610ecc565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610f1782610f1e565b9050919050565b6000610f2982610f30565b9050919050565b6000610f3b82610ecc565b9050919050565b6000610f4d82610eec565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610f8057610f7f610f8b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f5478206661696c65640000000000000000000000000000000000000000000000600082015250565b50565b7f5265717569726564206d696e696d756d20313055736400000000000000000000600082015250565b6110aa81610eb0565b81146110b557600080fd5b50565b6110c181610ec2565b81146110cc57600080fd5b50565b6110d881610eec565b81146110e357600080fd5b50565b6110ef81610ef6565b81146110fa57600080fd5b5056fea26469706673582212200fe5c7c90860198946e7c63bad632ba5398f4a1c9cee60a55a48db88653c0ecc64736f6c63430008070033",
  "devdoc": {
    "author": "SAc",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements price feeds as our library"
      }
    },
    "title": "A conytract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "THis function funds this contract"
      }
    },
    "notice": "demo sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 60,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "adressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 65,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "minimumUsd",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 68,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 73,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}